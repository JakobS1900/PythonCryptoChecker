name: CryptoChecker Gaming Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov black flake8 mypy

    - name: Run code formatting check
      run: |
        black --check --diff .

    - name: Run linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run type checking
      run: |
        mypy . --ignore-missing-imports --no-strict-optional

    - name: Run tests with coverage
      run: |
        pytest -v --cov=. --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security scan
      run: |
        bandit -r . -x ".venv,venv,env"
        safety check

  build:
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test application startup
      run: |
        timeout 30s python main.py || code=$?
        if [[ $code -ne 124 && $code -ne 0 ]]; then
          echo "Application failed to start"
          exit 1
        fi
        echo "Application started successfully"

  gaming-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install playwright pytest-playwright

    - name: Install Playwright browsers
      run: |
        playwright install

    - name: Run gaming integration tests
      run: |
        # Start the application in background
        python main.py &
        sleep 10

        # Test API endpoints
        curl -f http://localhost:8000/api/crypto/prices || exit 1
        curl -f http://localhost:8000/api/gaming/roulette/wheel/layout || exit 1

        # Run Playwright tests if they exist
        if [ -d "tests/gaming" ]; then
          pytest tests/gaming/ --browser=chromium
        fi

  deployment:
    runs-on: ubuntu-latest
    needs: [test, security, build, gaming-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Create deployment package
      run: |
        zip -r cryptochecker-gaming-platform.zip . \
          -x "*.git*" "*.pyc" "*__pycache__*" "*.env*" "tests/*" ".pytest_cache/*"

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: cryptochecker-gaming-platform
        path: cryptochecker-gaming-platform.zip

  notify:
    runs-on: ubuntu-latest
    needs: [deployment]
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deployment.result }}" == "success" ]; then
          echo "üéâ CryptoChecker Gaming Platform deployed successfully!"
          echo "‚úÖ All tests passed"
          echo "üöÄ Ready for production"
        else
          echo "‚ùå Deployment failed"
          echo "üîç Check logs for details"
        fi